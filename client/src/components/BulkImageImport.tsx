import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import DriveAnalyzer from "./DriveAnalyzer";
import type { Vehicle } from "@shared/schema";

interface BulkImageImportProps {
  onClose: () => void;
  vehicles: Vehicle[];
}

export default function BulkImageImport({ onClose, vehicles }: BulkImageImportProps) {
  const [googleDriveUrl, setGoogleDriveUrl] = useState("https://drive.google.com/drive/folders/1-AhZ6wwgNK9qQifm9j5eCoCkA316j7sk?usp=sharing");
  const [mappingData, setMappingData] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Bulk update mutation
  const bulkUpdateMutation = useMutation({
    mutationFn: async (updates: { vehicleId: string; imageUrls: string[] }[]) => {
      const results = await Promise.all(
        updates.map(({ vehicleId, imageUrls }) =>
          apiRequest("PUT", `/api/vehicles/${vehicleId}`, { images: imageUrls })
        )
      );
      return results;
    },
    onSuccess: () => {
      toast({ title: "Success", description: "Vehicle images updated successfully" });
      queryClient.invalidateQueries({ queryKey: ["/api/vehicles"] });
      onClose();
    },
    onError: (error) => {
      toast({ 
        title: "Error", 
        description: "Failed to update vehicle images", 
        variant: "destructive" 
      });
      console.error("Bulk update error:", error);
    },
  });

  const generateMappingFromDrive = async () => {
    if (!googleDriveUrl.trim()) {
      toast({
        title: "Error", 
        description: "Please provide your Google Drive folder URL",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      // Extract folder ID from Google Drive URL
      const folderIdMatch = googleDriveUrl.match(/\/folders\/([a-zA-Z0-9-_]+)/);
      if (!folderIdMatch) {
        throw new Error("Invalid Google Drive folder URL");
      }
      
      const folderId = folderIdMatch[1];
      
      // Smart mapping: match vehicles to likely folder names
      const generatedMapping = vehicles.map(vehicle => {
        const vehicleName = `${vehicle.year} ${vehicle.make} ${vehicle.model}`;
        const stockNum = vehicle.stockNumber;
        
        // Possible folder name variations that might exist in Google Drive
        const possibleFolderNames = [
          `${stockNum}`, // Just stock number
          `${stockNum} - ${vehicle.year} ${vehicle.make} ${vehicle.model}`, // Stock with full vehicle info
          `${vehicle.year} ${vehicle.make} ${vehicle.model}`, // Year Make Model
          `${vehicle.make} ${vehicle.model} ${vehicle.year}`, // Make Model Year
          `${vehicle.year} ${vehicle.make} ${vehicle.model} - ${stockNum}`, // Full with stock at end
          `${stockNum}_${vehicle.year}_${vehicle.make}_${vehicle.model}`.replace(/\s/g, '_'), // Underscore format
          `${vehicle.year}_${vehicle.make}_${vehicle.model}`.replace(/\s/g, '_'), // Year_Make_Model
        ];
        
        // For now, create smart placeholders that include likely folder matching patterns
        // The user will paste actual folder contents or we can enhance this with Google Drive API
        const imageUrls = [
          `https://drive.google.com/uc?export=view&id=FOLDER_${stockNum}_IMAGE_1_ID`,
          `https://drive.google.com/uc?export=view&id=FOLDER_${stockNum}_IMAGE_2_ID`,
          `https://drive.google.com/uc?export=view&id=FOLDER_${stockNum}_IMAGE_3_ID`,
          `https://drive.google.com/uc?export=view&id=FOLDER_${stockNum}_IMAGE_4_ID`,
        ];

        return {
          stockNumber: stockNum,
          vehicleName: vehicleName,
          vin: vehicle.vin,
          possibleFolderNames: possibleFolderNames,
          imageUrls: imageUrls,
          notes: `Look for folder named: "${possibleFolderNames[0]}" or similar variations`
        };
      });

      setMappingData(JSON.stringify(generatedMapping, null, 2));
      setAutoGenerated(true);
      
      toast({
        title: "Success",
        description: `Generated smart mapping for ${vehicles.length} vehicles with folder name matching patterns.`
      });

    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate mapping from Google Drive folder",
        variant: "destructive"
      });
      console.error("Drive mapping error:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleBulkImport = async () => {
    if (!mappingData.trim()) {
      toast({
        title: "Error",
        description: "Please generate or provide the vehicle-to-image mapping data",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      // Parse the mapping data (expecting JSON format)
      const mappings = JSON.parse(mappingData);
      
      // Validate and prepare updates
      const updates: { vehicleId: string; imageUrls: string[] }[] = [];
      
      for (const mapping of mappings) {
        const vehicle = vehicles.find(v => 
          v.stockNumber === mapping.stockNumber || 
          v.vin === mapping.vin ||
          `${v.make} ${v.model}`.toLowerCase() === mapping.vehicleName?.toLowerCase()
        );
        
        if (vehicle && mapping.imageUrls && Array.isArray(mapping.imageUrls)) {
          updates.push({
            vehicleId: vehicle.id,
            imageUrls: mapping.imageUrls
          });
        }
      }

      if (updates.length === 0) {
        toast({
          title: "Error",
          description: "No matching vehicles found for the provided data",
          variant: "destructive"
        });
        return;
      }

      // Execute bulk update
      await bulkUpdateMutation.mutateAsync(updates);
      
    } catch (error) {
      toast({
        title: "Error",
        description: "Invalid mapping data format. Please check your JSON.",
        variant: "destructive"
      });
      console.error("Import error:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const exampleFormat = `[
  {
    "stockNumber": "STOCK001",
    "vehicleName": "2020 Toyota Camry",
    "imageUrls": [
      "https://drive.google.com/file/d/YOUR_FILE_ID/view",
      "https://drive.google.com/file/d/ANOTHER_FILE_ID/view"
    ]
  },
  {
    "stockNumber": "STOCK002", 
    "vin": "1HGBH41JXMN109186",
    "imageUrls": [
      "https://drive.google.com/file/d/THIRD_FILE_ID/view"
    ]
  }
]`;

  return (
    <div className="space-y-6 max-h-[80vh] overflow-y-auto">
      <div>
        <h3 className="text-lg font-semibold mb-4">Bulk Import Vehicle Images</h3>
        <p className="text-gray-600 mb-4">
          Import multiple vehicle images from Google Drive using direct sharing links.
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="text-base">Step 1: Google Drive Setup</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm">
          <div>
            <strong>1. Make your images publicly accessible:</strong>
            <ul className="list-disc list-inside ml-4 mt-1 text-gray-600">
              <li>Right-click your Google Drive folder containing vehicle images</li>
              <li>Select "Share" â†’ "Anyone with the link can view"</li>
              <li>Get the direct sharing link for each image</li>
            </ul>
          </div>
          <div>
            <strong>2. Convert Drive links to direct image URLs:</strong>
            <p className="text-gray-600 ml-4">
              Change <code>https://drive.google.com/file/d/FILE_ID/view</code><br/>
              to <code>https://drive.google.com/uc?export=view&id=FILE_ID</code>
            </p>
          </div>
        </CardContent>
      </Card>

      <DriveAnalyzer
        vehicles={vehicles}
        onMappingGenerated={(mapping) => {
          setMappingData(mapping);
          setAutoGenerated(true);
        }}
      />

      <div>
        <Label htmlFor="googleDriveUrl">Google Drive Folder URL</Label>
        <div className="space-y-2">
          <div className="flex gap-2">
            <Input
              id="googleDriveUrl"
              type="url"
              placeholder="https://drive.google.com/drive/folders/..."
              value={googleDriveUrl}
              onChange={(e) => setGoogleDriveUrl(e.target.value)}
            />
            <Button 
              type="button"
              onClick={generateMappingFromDrive}
              disabled={isProcessing}
              variant="outline"
              className="whitespace-nowrap"
            >
              {isProcessing ? "Analyzing..." : "Smart Match Folders"}
            </Button>
          </div>
          <div className="bg-green-50 border border-green-200 rounded p-3">
            <p className="text-xs text-green-700">
              <strong>Pro Tip:</strong> I'll analyze your vehicle inventory and suggest the most likely folder names in Google Drive. 
              This works by matching stock numbers, make/model combinations, and common naming patterns dealers use.
            </p>
          </div>
        </div>

      </div>

      <div>
        <Label htmlFor="mappingData">Vehicle-to-Image Mapping (JSON Format)</Label>
        <Textarea
          id="mappingData"
          placeholder="Click 'Generate Mapping' above to create a template, then replace FILE_ID placeholders with actual Google Drive file IDs..."
          value={mappingData}
          onChange={(e) => setMappingData(e.target.value)}
          rows={12}
          className="mt-1 font-mono text-sm"
        />
        {autoGenerated && (
          <div className="mt-2 space-y-3">
            <div className="p-3 bg-blue-50 border border-blue-200 rounded">
              <p className="text-sm text-blue-800">
                <strong>Quick Setup Guide for Your Google Drive:</strong>
              </p>
              <ol className="text-xs text-blue-700 mt-2 space-y-1 list-decimal list-inside">
                <li>The system has matched each vehicle to likely folder names in your Google Drive</li>
                <li>Open each vehicle folder (look for folder names shown in "possibleFolderNames")</li>
                <li>Right-click each image â†’ "Share" â†’ "Anyone with link can view"</li>
                <li>Copy sharing links and extract FILE_IDs from URLs like: <code className="bg-blue-100 px-1 rounded text-xs">drive.google.com/file/d/FILE_ID/view</code></li>
                <li>Replace the FOLDER_STOCKXXX_IMAGE_X_ID placeholders with actual FILE_IDs</li>
                <li>Click "Import Images" to bulk update all vehicles</li>
              </ol>
            </div>
            <div className="p-3 bg-yellow-50 border border-yellow-200 rounded">
              <p className="text-sm text-yellow-800">
                <strong>Example:</strong> Replace <code className="bg-yellow-100 px-1 rounded">FILE_ID_FOR_STOCK001_IMAGE_1</code><br/>
                with actual file ID like: <code className="bg-yellow-100 px-1 rounded">1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms</code>
              </p>
            </div>
          </div>
        )}
      </div>

      <Card className="bg-gray-50">
        <CardHeader>
          <CardTitle className="text-sm">Expected JSON Format:</CardTitle>
        </CardHeader>
        <CardContent>
          <pre className="text-xs overflow-x-auto whitespace-pre-wrap bg-white p-3 rounded border">
            {exampleFormat}
          </pre>
          <p className="text-xs text-gray-600 mt-2">
            You can match vehicles by stockNumber, VIN, or vehicleName (make + model).
            Use direct Google Drive image URLs for best performance.
          </p>
        </CardContent>
      </Card>

      <div className="flex justify-end space-x-4 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button 
          onClick={handleBulkImport}
          className="bg-trex-green hover:bg-trex-green text-white"
          disabled={isProcessing || bulkUpdateMutation.isPending}
        >
          {isProcessing || bulkUpdateMutation.isPending ? "Processing..." : "Import Images"}
        </Button>
      </div>
    </div>
  );
}